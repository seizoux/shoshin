/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./static/ts/gen.ts":
/*!**************************!*\
  !*** ./static/ts/gen.ts ***!
  \**************************/
/***/ (() => {

eval("\nvar currentStep = 0;\nvar placeholdersContainer = document.getElementById('filePlaceholders');\n// Declare a global array to store uploaded files\nvar uploadedFiles = [];\n// Define an array of texts for each placeholder\nvar placeholderTexts = [\n    \"MAIN\",\n    \"WEAPON\",\n    \"MAIN ECHO\",\n    \"2ND ECHO\",\n    \"3RD ECHO\",\n    \"4TH ECHO\",\n    \"5TH ECHO\",\n    \"SKILLS\",\n    \"RS. CHAINS\"\n    // Add more descriptions as needed\n];\nvar stepTips = [\n    \"Upload the main section of your resonator page (the first icon on the left column).\",\n    \"Upload the weapon section (the second icon on the left column).\",\n    \"Upload the Main Echo equipped on your Resonator (the top one on the echoes equipped, generally the first COST 4).\",\n    \"Upload the 2nd Echo equipped on your Resonator.\",\n    \"Upload the 3rd Echo equipped on your Resonator.\",\n    \"Upload the 4th Echo equipped on your Resonator.\",\n    \"Upload the 5th Echo equipped on your Resonator.\",\n    \"Upload the Skills section of your Resonator (the 4th icon on the left column).\",\n    \"Upload the Resonance Chains section of your resonator (the 5th icon on the left column).\"\n];\ndocument.addEventListener('DOMContentLoaded', function () {\n    var placeholdersContainer = document.getElementById('filePlaceholders');\n    var currentStep = 0;\n    // Function to update the #stepTip content with step number\n    function updateStepTip(currentStep) {\n        var stepTipElement = document.getElementById('stepTip');\n        if (stepTipElement && stepTips[currentStep]) {\n            // Format the tip with step number and custom text\n            stepTipElement.innerHTML = \"<p>TIP (Step \".concat(currentStep + 1, \"): \").concat(stepTips[currentStep], \"</p>\");\n            stepTipElement.className = 'text-center text-sm text-black dark:text-white'; // Tailwind CSS classes\n        }\n    }\n    function initializePlaceholders() {\n        // Create line containers\n        var firstLineContainer = document.createElement('div');\n        firstLineContainer.className = 'flex justify-center items-center flex-wrap mb-4 gap-2'; // Flex container for the first line\n        var secondLineContainer = document.createElement('div');\n        secondLineContainer.className = 'flex justify-center items-center flex-wrap gap-2'; // Flex container for the second line\n        for (var i = 0; i < 9; i++) {\n            // Create the main container div for each placeholder and its description\n            var mainContainerDiv = document.createElement('div');\n            mainContainerDiv.className = 'flex flex-col items-center justify-center mb-4'; // Margin bottom for spacing\n            // Create the wrapper div for the image with specified classes\n            var wrapperDiv = document.createElement('div');\n            // Adjusted classes for a wider appearance\n            wrapperDiv.className = 'bg-transparent input-glow-dark p-2 flex justify-center items-center w-48 h-24 border-2 border-dashed border-gray-300 rounded-lg';\n            // Create the img element\n            var img = document.createElement('img');\n            img.src = 'https://shoshin.moe/static/empty.png'; // Default placeholder image\n            img.className = 'max-w-full max-h-full object-contain';\n            img.alt = \"Placeholder \".concat(i + 1);\n            // Append the img to the wrapper div\n            wrapperDiv.appendChild(img);\n            // Append the wrapper div to the main container div\n            mainContainerDiv.appendChild(wrapperDiv);\n            // Create and append the description text outside and below the image wrapper\n            var descriptionText = document.createElement('span');\n            descriptionText.textContent = placeholderTexts[i]; // Get text from array\n            descriptionText.className = 'text-center mt-2 text-black dark:text-white font-bold';\n            mainContainerDiv.appendChild(descriptionText);\n            // Append the main container div to the appropriate line container\n            if (i < 5) {\n                firstLineContainer.appendChild(mainContainerDiv);\n            }\n            else {\n                secondLineContainer.appendChild(mainContainerDiv);\n            }\n        }\n        // Create a new flex container for both line containers\n        var flexContainer = document.createElement('div');\n        flexContainer.className = 'flex flex-col gap-2'; // Flex column with gap\n        // Append line containers to the new flex container\n        flexContainer.appendChild(firstLineContainer);\n        flexContainer.appendChild(secondLineContainer);\n        // Append the new flex container to the placeholders container\n        placeholdersContainer.appendChild(flexContainer);\n        updateStepTip(0);\n    }\n    function handleFileUpload(event) {\n        var input = event.target;\n        var files = input.files;\n        if (!files)\n            return;\n        // Check if files are selected\n        if (files.length === 0) {\n            alert('Please select a file.');\n            return;\n        }\n        // Check for the number of files exceeding the remaining placeholders\n        if (files.length > 9 - currentStep) {\n            alert(\"You can only upload \".concat(9 - currentStep, \" more file(s).\"));\n            return;\n        }\n        for (var i = 0; i < files.length; i++) {\n            var file = files[i];\n            // Check file type\n            if (!['image/png', 'image/jpg', 'image/jpeg'].includes(file.type)) {\n                alert('Only PNG, JPG, and JPEG files are allowed.');\n                continue; // Skip this file and continue with the next\n            }\n            // Check file size (20MB)\n            if (file.size > 20 * 1024 * 1024) {\n                alert('File size must be less than 20MB.');\n                continue; // Skip this file and continue with the next\n            }\n            // File passes all checks, add it to the uploadedFiles array\n            uploadedFiles.push(file);\n            if (currentStep < 9) {\n                // Assuming the first 5 placeholders are in the firstLineContainer and the rest in the secondLineContainer\n                var lineContainerIndex = currentStep < 5 ? 0 : 1; // 0 for firstLineContainer, 1 for secondLineContainer\n                var lineContainer = placeholdersContainer.children[0].children[lineContainerIndex]; // Access the new flex container, then the correct line container\n                // Calculate the index of the mainContainerDiv within the selected line container\n                var mainContainerDivIndex = currentStep < 5 ? currentStep : currentStep - 5;\n                var wrapperDiv = lineContainer.children[mainContainerDivIndex];\n                var img = wrapperDiv.getElementsByTagName('img')[0];\n                img.src = URL.createObjectURL(file); // Replace placeholder with uploaded file image\n                currentStep++;\n                updateStepTip(currentStep);\n                if (currentStep === 9) {\n                    finalizeUpload();\n                    break; // Exit the loop if all placeholders are filled\n                }\n            }\n        }\n    }\n    function showLoadingAnimation() {\n        placeholdersContainer.textContent = ''; // Clear existing content\n        // Create loading animation using provided SVG\n        var loadingHTML = \"\\n            <div role=\\\"status\\\">\\n                <svg aria-hidden=\\\"true\\\" class=\\\"inline w-8 h-8 text-black animate-spin dark:text-white fill-red-600\\\" viewBox=\\\"0 0 100 101\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n                    <path d=\\\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\\\" fill=\\\"currentColor\\\"/>\\n                    <path d=\\\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\\\" fill=\\\"currentFill\\\"/>\\n                </svg>\\n                <span id=\\\"text-container-loading\\\" class=\\\"sr-only text-black dark:text-white ml-2 sans-it font-bold\\\">Hang tight, we're doing some magic...</span>\\n            </div>\\n        \";\n        // Insert the loading animation HTML into the placeholdersContainer\n        placeholdersContainer.innerHTML = loadingHTML;\n        var textContainer = document.querySelector('#text-container-loading'); // Adjust the selector to your specific container\n        if (textContainer) {\n            var html = textContainer.innerHTML;\n            // Wrap each period in a span with a class 'period'\n            html = html.replace(/\\./g, '<span class=\"period\">.</span>');\n            textContainer.innerHTML = html;\n            var periods_1 = textContainer.querySelectorAll('.period');\n            var current_1 = 0;\n            var animatePeriods_1 = function () {\n                // Remove the 'bounce' class from all periods\n                periods_1.forEach(function (period) { return period.classList.remove('bounce'); });\n                // Add the 'bounce' class to the current period\n                periods_1[current_1].classList.add('bounce');\n                // Move to the next period or loop back to the first\n                current_1 = (current_1 + 1) % periods_1.length;\n                // Set the next animation to start after the current one finishes\n                setTimeout(animatePeriods_1, 500); // Match the duration of the CSS animation\n            };\n            animatePeriods_1(); // Start the animation\n        }\n    }\n    function finalizeUpload() {\n        var p = [115, 104, 111, 115, 104, 105, 110, 46, 109, 111, 101, 47, 97, 112, 105, 47, 103, 101, 110, 101, 114, 97, 116, 101, 95, 98, 117, 105, 108, 100].map(function (c) { return String.fromCharCode(c); }).join('').split('/');\n        var u = \"https://\".concat(p[0], \"/\").concat(p[1], \"/\").concat(p[2]);\n        var proxyUrlParts = [112, 114, 111, 120, 121];\n        var proxyUrl = \"https://\".concat(p[0], \"/\").concat(proxyUrlParts.map(function (c) { return String.fromCharCode(c); }).join(''));\n        showLoadingAnimation();\n        var formData = new FormData();\n        uploadedFiles.forEach(function (file, index) {\n            formData.append(\"file\".concat(index), file);\n        });\n        new Promise(function (resolve, reject) {\n            var fetchWithTimeout = function (url, options, timeout) {\n                if (timeout === void 0) { timeout = 600000; }\n                return new Promise(function (resolve, reject) {\n                    var timer = setTimeout(function () { return reject(new Error('Request timed out')); }, timeout);\n                    fetch(url, options).then(function (response) {\n                        clearTimeout(timer);\n                        resolve(response);\n                    }, function (err) {\n                        clearTimeout(timer);\n                        reject(err);\n                    });\n                });\n            };\n            var displayImageAndButtons = function (data) {\n                placeholdersContainer.textContent = '';\n                var imageAndButtonsContainer = document.createElement('div');\n                imageAndButtonsContainer.className = 'flex flex-col justify-center items-center gap-4';\n                var imgContainer = document.createElement('div');\n                imgContainer.className = 'flex flex-row justify-center items-center';\n                var img = document.createElement('img');\n                img.src = \"\".concat(data.image);\n                img.className = 'w-full p-2 md:p-0 md:w-1/2 h-auto';\n                img.style.objectFit = 'contain';\n                imgContainer.appendChild(img);\n                imageAndButtonsContainer.appendChild(imgContainer);\n                var buttonsContainer = document.createElement('div');\n                buttonsContainer.className = 'flex flex-row justify-center items-center gap-4';\n                var downloadButtonUrl = \"\".concat(proxyUrl, \"?url=\").concat(encodeURIComponent(data.image));\n                var downloadButton = document.createElement('a');\n                downloadButton.href = downloadButtonUrl;\n                downloadButton.setAttribute('download', \"shoshin_download_\".concat(data.name, \".png\"));\n                downloadButton.className = \"inline-flex items-center justify-center p-2 cursor-pointer rounded-md bg-white text-black hover:bg-black hover:text-white input-glow w-full\";\n                downloadButton.innerText = 'Download';\n                buttonsContainer.appendChild(downloadButton);\n                downloadButton.onclick = function (e) {\n                    e.preventDefault();\n                    fetch(downloadButtonUrl)\n                        .then(function (response) { return response.blob(); })\n                        .then(function (blob) {\n                        var url = window.URL.createObjectURL(blob);\n                        var a = document.createElement('a');\n                        a.style.display = 'none';\n                        a.href = url;\n                        a.download = \"shoshin_download_\".concat(data.name, \".png\");\n                        document.body.appendChild(a);\n                        a.click();\n                        window.URL.revokeObjectURL(url);\n                    })\n                        .catch(function (err) { return console.error('Error during download:', err); });\n                };\n                var copyButton = document.createElement('a');\n                copyButton.href = '#';\n                copyButton.className = \"inline-flex items-center justify-center p-2 cursor-pointer rounded-md bg-white text-black hover:bg-black hover:text-white input-glow w-full\";\n                copyButton.innerText = 'Copy URL';\n                copyButton.onclick = function (e) {\n                    e.preventDefault(); // Prevent the default anchor action\n                    navigator.clipboard.writeText(img.src).then(function () {\n                        copyButton.innerText = 'URL Copied!'; // Change button text to indicate success\n                        setTimeout(function () {\n                            copyButton.innerText = 'Copy URL'; // Revert back to original text after 2 seconds\n                        }, 2000);\n                    }).catch(function (err) {\n                        console.error('Error copying URL:', err);\n                    });\n                };\n                buttonsContainer.appendChild(copyButton); // Append the copy URL button within the flex container\n                imageAndButtonsContainer.appendChild(buttonsContainer); // Append the buttons container to the main container\n                placeholdersContainer.appendChild(imageAndButtonsContainer); // Append the new div to the main container\n            };\n            fetchWithTimeout(u, {\n                method: 'POST',\n                body: formData,\n            }, 600000)\n                .then(function (response) { return response.json(); })\n                .then(function (data) {\n                console.log(data);\n                if (data.error) {\n                    if (data.hasOwnProperty('confirm')) {\n                        var confirmationContainer = document.createElement('div');\n                        confirmationContainer.className = 'flex flex-col justify-center items-center gap-4';\n                        var confirmMessage = document.createElement('div');\n                        confirmMessage.className = 'text-black dark:text-white font-bold';\n                        confirmMessage.innerText = data.confirm;\n                        var buttonsRow = document.createElement('div');\n                        buttonsRow.className = 'flex flex-row justify-center items-center gap-4';\n                        var yesButton = document.createElement('button');\n                        yesButton.className = 'bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded';\n                        yesButton.innerText = \"Yes, it's me!\";\n                        yesButton.onclick = function () {\n                            showLoadingAnimation();\n                            var confirmUrl = \"https://\".concat(p[0], \"/\").concat(p[1], \"/generate_build\");\n                            var confirmPayload = {\n                                confirm: true,\n                            };\n                            // Convert confirmPayload to JSON string and append it to FormData\n                            formData.append('confirmPayload', JSON.stringify(confirmPayload));\n                            fetchWithTimeout(confirmUrl, {\n                                method: 'POST',\n                                body: formData\n                            }, 600000)\n                                .then(function (response) { return response.json(); })\n                                .then(function (confirmData) {\n                                console.log(confirmData);\n                                displayImageAndButtons(confirmData);\n                            })\n                                .catch(function (err) { return console.error('Error during confirmation:', err); });\n                        };\n                        var noButton = document.createElement('button');\n                        noButton.className = 'bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded';\n                        noButton.innerText = \"Not at all..\";\n                        noButton.onclick = function () {\n                            window.location.reload();\n                        };\n                        buttonsRow.appendChild(yesButton);\n                        buttonsRow.appendChild(noButton);\n                        confirmationContainer.appendChild(confirmMessage);\n                        confirmationContainer.appendChild(buttonsRow);\n                        placeholdersContainer.textContent = '';\n                        placeholdersContainer.appendChild(confirmationContainer);\n                        return reject(data.error);\n                    }\n                    placeholdersContainer.textContent = data.error || 'Error loading image.';\n                    return reject(data.error);\n                }\n                displayImageAndButtons(data);\n                resolve(data);\n            })\n                .catch(function (error) {\n                console.error('Error:', error);\n                placeholdersContainer.textContent = 'Error loading image.';\n                reject(error);\n            });\n        });\n    }\n    var fileUploadInput = document.getElementById('fileUpload');\n    fileUploadInput.addEventListener('change', handleFileUpload);\n    initializePlaceholders();\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./static/ts/gen.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./static/ts/gen.ts"]();
/******/ 	
/******/ })()
;